/*
 *
 * Copyright 2020 First People's Cultural Council
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * /
 */

package ca.firstvoices.utils;

import org.nuxeo.ecm.automation.core.util.StringList;
import org.nuxeo.ecm.core.api.DocumentModel;

import java.io.Serializable;

import static ca.firstvoices.utils.FVExportProperties.FVEXPORT_PROGRESS_STRING;
import static ca.firstvoices.utils.FVExportProperties.FVEXPORT_PROGRESS_VALUE;

public class FVExportWorkInfo implements Serializable
{
    public String fileName;             // name as generated by export process (not necessarily as saved)
    public String fileNameAsSaved;      // name of the file as it was saved in tmp
    public String filePath;             // path to temporary file created during export
    public String initiatorName;        // name of the user starting export
    public String dialectName;          // name of dialect for which export was generated
    public String dialectGUID;          // UUID for dialect connected to export
    public String resourcesFolderGUID;  // UUID for dialect's Resource Folder
    public String exportFormat;         // CSV or PDF
    public String exportQuery;          // actual query which was passed to generate export
    public String exportElement;        // word of phrase constant
    public Long workDuration;           // start of export as obtained from system
    public int originalWorkloadSize;    // size resulting from the query
    public long fileLength;             // finished export file size
    public String workDigest;           // connects principal with export query based on  MD5( principal.name + principal.hash )
    public String exportDigest;         // identifies export based on query, request type, columns and principal info ( MD5 hash )
    public StringList columns;          // columns as requested by user
    public DocumentModel wrapper;       // document which wraps/contains export file aka. a link to export file
    public String continueAutoEvent;    // event to send back to Listener when export is ready for wrapping
    public String mimeType;
    public String encoding;

    public String getFullFileName() {
        if (filePath == null || fileNameAsSaved == null) return null;

        return filePath + fileNameAsSaved;
    }

    public String getWrapperName() {
        if (exportDigest == null) return null;
        return "Export-" + exportElement + "-" + exportDigest;
    }

    public void setExportProgress(String progress) {
        if (wrapper == null) return;
        wrapper.setPropertyValue(FVEXPORT_PROGRESS_STRING, progress);
    }

    public void setExportProgressValue(double progress) {
        wrapper.setPropertyValue(FVEXPORT_PROGRESS_VALUE, progress);
    }
}

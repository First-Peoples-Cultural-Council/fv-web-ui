/*
 *
 *  *
 *  * Copyright 2020 First People's Cultural Council
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *     http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *  * /
 *
 */

package ca.firstvoices.export.utils;

import static ca.firstvoices.export.utils.FVExportProperties.FVEXPORT_PROGRESS_STRING;
import static ca.firstvoices.export.utils.FVExportProperties.FVEXPORT_PROGRESS_VALUE;

import java.io.Serializable;
import org.nuxeo.ecm.automation.core.util.StringList;
import org.nuxeo.ecm.core.api.DocumentModel;

public class FVExportWorkInfo implements Serializable {

  private String fileName;             // name as generated by export process (not necessarily as
  // saved)
  private String fileNameAsSaved;      // name of the file as it was saved in tmp
  private String filePath;             // path to temporary file created during export
  private String initiatorName;        // name of the user starting export
  private String dialectName;          // name of dialect for which export was generated
  private String dialectGUID;          // UUID for dialect connected to export
  private String resourcesFolderGUID;  // UUID for dialect's Resource Folder
  private String exportFormat;         // CSV or PDF
  private String exportQuery;          // actual query which was passed to generate export
  private String exportElement;        // word of phrase constant
  private long workDuration;           // start of export as obtained from system
  private int originalWorkloadSize;    // size resulting from the query
  private long fileLength;             // finished export file size
  private String workDigest;           // connects principal with export query based on  MD5(
  // principal.name + principal.hash )
  private String exportDigest;         // identifies export based on query, request type, columns
  // and principal info ( MD5 hash )
  private StringList columns;          // columns as requested by user
  private DocumentModel wrapper;       // document which wraps/contains export file aka. a link
  // to export file
  private String continueAutoEvent;    // event to send back to Listener when export is ready for
  // wrapping
  private String mimeType;
  private String encoding;

  public String getFileName() {
    return fileName;
  }

  public void setFileName(final String fileName) {
    this.fileName = fileName;
  }

  public String getFileNameAsSaved() {
    return fileNameAsSaved;
  }

  public void setFileNameAsSaved(final String fileNameAsSaved) {
    this.fileNameAsSaved = fileNameAsSaved;
  }

  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(final String filePath) {
    this.filePath = filePath;
  }

  public String getInitiatorName() {
    return initiatorName;
  }

  public void setInitiatorName(final String initiatorName) {
    this.initiatorName = initiatorName;
  }

  public String getDialectName() {
    return dialectName;
  }

  public void setDialectName(final String dialectName) {
    this.dialectName = dialectName;
  }

  public String getDialectGUID() {
    return dialectGUID;
  }

  public void setDialectGUID(final String dialectGUID) {
    this.dialectGUID = dialectGUID;
  }

  public String getResourcesFolderGUID() {
    return resourcesFolderGUID;
  }

  public void setResourcesFolderGUID(final String resourcesFolderGUID) {
    this.resourcesFolderGUID = resourcesFolderGUID;
  }

  public String getExportFormat() {
    return exportFormat;
  }

  public void setExportFormat(final String exportFormat) {
    this.exportFormat = exportFormat;
  }

  public String getExportQuery() {
    return exportQuery;
  }

  public void setExportQuery(final String exportQuery) {
    this.exportQuery = exportQuery;
  }

  public String getExportElement() {
    return exportElement;
  }

  public void setExportElement(final String exportElement) {
    this.exportElement = exportElement;
  }

  public long getWorkDuration() {
    return workDuration;
  }

  public void setWorkDuration(final long workDuration) {
    this.workDuration = workDuration;
  }

  public int getOriginalWorkloadSize() {
    return originalWorkloadSize;
  }

  public void setOriginalWorkloadSize(final int originalWorkloadSize) {
    this.originalWorkloadSize = originalWorkloadSize;
  }

  public long getFileLength() {
    return fileLength;
  }

  public void setFileLength(final long fileLength) {
    this.fileLength = fileLength;
  }

  public String getWorkDigest() {
    return workDigest;
  }

  public void setWorkDigest(final String workDigest) {
    this.workDigest = workDigest;
  }

  public String getExportDigest() {
    return exportDigest;
  }

  public void setExportDigest(final String exportDigest) {
    this.exportDigest = exportDigest;
  }

  public StringList getColumns() {
    return columns;
  }

  public void setColumns(final StringList columns) {
    this.columns = columns;
  }

  public DocumentModel getWrapper() {
    return wrapper;
  }

  public void setWrapper(final DocumentModel wrapper) {
    this.wrapper = wrapper;
  }

  public String getContinueAutoEvent() {
    return continueAutoEvent;
  }

  public void setContinueAutoEvent(final String continueAutoEvent) {
    this.continueAutoEvent = continueAutoEvent;
  }

  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(final String mimeType) {
    this.mimeType = mimeType;
  }

  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(final String encoding) {
    this.encoding = encoding;
  }

  public String getWrapperName() {
    if (exportDigest == null) {
      return null;
    }
    return "Export-" + exportElement + "-" + exportDigest;
  }

  public void setExportProgress(String progress) {
    if (wrapper == null) {
      return;
    }
    wrapper.setPropertyValue(FVEXPORT_PROGRESS_STRING, progress);
  }

  public void setExportProgressValue(double progress) {
    wrapper.setPropertyValue(FVEXPORT_PROGRESS_VALUE, progress);
  }
}
